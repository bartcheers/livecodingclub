datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  location              String?
  accounts              Account[]
  sessions              Session[]
  userSkills            UserSkill[]
  initiatedConversations Conversation[] @relation("InitiatedConversations")
  receivedConversations  Conversation[] @relation("ReceivedConversations")
  sentMessages           Message[]      @relation("MessageSender")
  receivedMessages       Message[]      @relation("MessageReceiver")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Skill {
  id         String     @id @default(cuid())
  name       String
  userSkills UserSkill[]
}

model UserSkill {
  userId String
  skillId String
  user   User @relation(fields: [userId], references: [id])
  skill  Skill @relation(fields: [skillId], references: [id])

  @@id([userId, skillId])
}

model Message {
  id          String   @id @default(cuid())
  content     String
  sentAt      DateTime @default(now())
  senderId    String
  receiverId  String
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])
  receiver    User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model Conversation {
  id           String   @id @default(cuid())
  user1Id      String
  user2Id      String
  user1        User     @relation("InitiatedConversations", fields: [user1Id], references: [id])
  user2        User     @relation("ReceivedConversations", fields: [user2Id], references: [id])
  messages     Message[]
}
